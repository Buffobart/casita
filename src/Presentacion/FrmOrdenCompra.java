/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Entidad.ClsEntidadCompra;
import Entidad.ClsEntidadCompraHib;
import Entidad.ClsEntidadProducto;
import Entidad.ClsEntidadProductoHib;
import Entidad.ClsEntidadProveedor;
import Entidad.ClsEntidadProveedorHib;
import Entidad.IntEntidadDetalleImprimible;
import Entidad.IntEntidadTransaccionImprimible;
import Entidad.IntTercero;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;

/**
 *
 * @author Alan
 */
public class FrmOrdenCompra extends javax.swing.JInternalFrame {
    
    private ClsEntidadCompra clsEntidadCompra;
    private ClsEntidadProveedor clsEntidadProveedor;
    private ArrayList<ClsEntidadProducto> productos;
    //private ArrayList<ClsEntidadDetalleCompra> detalles;
    
    private BufferedImage formImage = null;
    private BufferedImage LogoImage = null;
    
    private final int LETTER_WIDTH = 612;
    private final int LETTER_HEIGHT = 792;
    private final int MARGIN = 20;
    private ClsEntidadCompraHib compra;
    private IntEntidadTransaccionImprimible transaccion;
    
    DecimalFormat decimalFormat = new DecimalFormat("#0.##");
    
    /**
     * Creates new form printDemo
     */
    public FrmOrdenCompra() {
        initComponents();
        
        previewPanel preview = new previewPanel();
        preview.setPreferredSize(new Dimension(LETTER_WIDTH, LETTER_HEIGHT));
        this.jScrollPane1.setViewportView(preview);

        //pack();
    }
    
    public ClsEntidadCompra getClsEntidadCompra() {
        return clsEntidadCompra;
    }

    public void setClsEntidadCompra(ClsEntidadCompra clsEntidadCompra) {
        this.clsEntidadCompra = clsEntidadCompra;
    }

    public ClsEntidadProveedor getClsEntidadProveedor() {
        return clsEntidadProveedor;
    }

    public void setClsEntidadProveedor(ClsEntidadProveedor clsEntidadProveedor) {
        this.clsEntidadProveedor = clsEntidadProveedor;
    }

    public ArrayList getProductos() {
        return productos;
    }

    public void setProductos(ArrayList productos) {
        this.productos = productos;
    }
    
    /*
    public ArrayList getDetalles() {
        return this.detalles;
    }

    public void setDetalles(ArrayList detalles) {
        this.detalles = detalles;
    }
    */
    public BufferedImage getFormImage() throws IOException{
        
        if(formImage == null){
            //URL imagen = getClass().getResource("/Iconos/orden.png");
            //System.out.println("");
            //String image_path = 
            
            formImage = ImageIO.read(getClass().getResource("/Iconos/orden.png"));
        }
        
        return formImage;
    }
    
    
    
    public BufferedImage getLogoImage() throws IOException{
        
        if(LogoImage == null){
            //URL imagen = getClass().getResource("/Iconos/orden.png");
            //System.out.println("");
            //String image_path = 
            
            LogoImage = ImageIO.read(getClass().getResource("/Iconos/logo_s.jpg"));
        }
        
        return LogoImage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCondiciones = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Print");
        setMinimumSize(new java.awt.Dimension(608, 526));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 500));

        jLabel1.setText("Orden de Compra - Preview");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/printer.png"))); // NOI18N
        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, java.awt.BorderLayout.EAST);

        jLabel2.setText("Condiciones Comerciales:");
        jPanel1.add(jLabel2);

        txtCondiciones.setPreferredSize(new java.awt.Dimension(250, 20));
        txtCondiciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCondicionesKeyTyped(evt);
            }
        });
        jPanel1.add(txtCondiciones);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintManager());
        boolean doPrint = job.printDialog();
        
        if(doPrint){
            try {
                job.print();
            } catch (PrinterException e) {
                // The job did not successfully
                // complete
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCondicionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCondicionesKeyTyped
        this.repaint();
    }//GEN-LAST:event_txtCondicionesKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCondiciones;
    // End of variables declaration//GEN-END:variables

    private void paint(Graphics2D g2, double scale, PageFormat pageFormat){
        try {
            
            //BufferedImage image = getFormImage();PageFormat
            int x = 0;//this.MARGIN;
            int y = 0;//this.MARGIN;
            int width = this.LETTER_WIDTH;
            int height = this.LETTER_HEIGHT;// - (y*2);
            /*
            if(pageFormat != null){
                width = (int) (pageFormat.getWidth() - (x*2));
                height = (int) (pageFormat.getHeight() - (y*2));
            }
            */
            
            //System.out.println("Scale: " + scale);
            
            g2.setColor(Color.WHITE);
            g2.fillRect(0, 0, (int)width, (int)height);
            
            scale = (float)(this.LETTER_WIDTH - (this.MARGIN *2)) / this.LETTER_WIDTH;
            //System.out.println("Scale: " + scale);
            
            g2.scale(scale, scale);
            g2.translate(this.MARGIN, this.MARGIN);
            //BufferedImage image = ImageIO.read(new File("/Iconos/orden_compra.jpg"));
            
            
            g2.setColor(Color.BLACK);
            g2.setFont(new Font("calibri", Font.PLAIN, 10)); 
            
            //g2.drawRect(0, 0, width, height);
            
            //g2.drawImage(image, 0, 0, null);
            
            BufferedImage logo = this.getLogoImage();
            
            int logo_x = this.LETTER_WIDTH / 2 - (logo.getWidth() / 2);
            
            g2.drawImage(logo, null, logo_x, 15);
            
            /**
             * DATOS DE LA EMPRESA
             */
            
            try{
                Properties empresa = cargaPropertiesDatosEmpresa();

                if(empresa != null){
                    g2.drawString(empresa.getProperty("reporte.nombre"), 400, 15);
                    g2.drawString(empresa.getProperty("reporte.razon"), 400, 30);
                    g2.drawString(empresa.getProperty("reporte.rfc"), 400, 45);
                    g2.drawString(empresa.getProperty("reporte.direccion"), 400, 60);
                    g2.drawString(empresa.getProperty("reporte.colonia"), 400, 75);
                    g2.drawString(empresa.getProperty("reporte.municipio"), 400, 90);
                    g2.drawString(empresa.getProperty("reporte.telefono"), 400, 105);
                }
            }catch(Exception e){
                e.printStackTrace();
            }
            
            
            //transaccion No.
            if(this.transaccion != null){
                
                if(this.transaccion.getNumero() != null){
                    g2.drawString(this.transaccion.getNumero(), 550, 15);
                }
                
                Date fecha = this.transaccion.getFecha();
                if(fecha == null){
                    fecha = new Date();
                }
                Calendar cal = Calendar.getInstance();
                cal.setTime( fecha );

                String fecha_s = "" + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR);

                g2.drawString( fecha_s, 550, 105);
                //g2.drawString( "" + (cal.get(Calendar.MONTH) + 1), 720, 175);
                //g2.drawString( "" + cal.get(Calendar.YEAR), 760, 175);
            }
            
            IntTercero tercero = this.transaccion.getDatosDelTercero();
            
            if(tercero != null){
                //datos del tercero
                
                g2.drawString(tercero.getTipo() + ": " + tercero.getId(), 0, 15);
                g2.drawString(tercero.getNombre(), 0, 30);
                g2.drawString(tercero.getDireccion(), 0, 45);
                g2.drawString("R.F.C: " + tercero.getRFC(), 0, 60);
                g2.drawString("Telefono: " + tercero.getTelefono(), 0, 75);
            }else{
                g2.drawString("Tercero: -", 0, 15);
                g2.drawString("No asignado.", 0, 30);
            }
            
            //g2.drawString(transaccion.getTipoTransaccion(), 0, 90);
            
            int inicio_detalle = 120;
            
            g2.drawLine(0, inicio_detalle, width, inicio_detalle);
            g2.setStroke( new BasicStroke(2f)  );
            g2.drawLine(0, inicio_detalle + 15, width, inicio_detalle + 15);
            
            g2.drawString("Codigo", 0, inicio_detalle + 10);
            g2.drawString("Nombre", 90, inicio_detalle + 10);
            //g2.drawString();
            
            g2.drawString( "Cantidad", 420, inicio_detalle + 10);
            g2.drawString( "Precio", 470, inicio_detalle + 10);
            g2.drawString( "Importe", 540, inicio_detalle + 10);

            //int i = 0;
            int pro_x = 0;
            int pro_y = inicio_detalle + 30;
            
            int de_x = 0;
            int de_y = inicio_detalle + 30;
            
            Collection<IntEntidadDetalleImprimible> detalles = this.transaccion.getClsEntidadDetalleCollection();
            
            for(IntEntidadDetalleImprimible detalle : detalles ){
                ClsEntidadProductoHib producto = detalle.getIdProducto();
                g2.drawString(producto.getCodigo(), pro_x, pro_y);
                g2.drawString(producto.getNombre(), pro_x + 90, pro_y);
                //g2.drawString(producto.getStrDescripcionProducto(), pro_x + 285, pro_y);
                pro_y += 15;
                
                g2.drawString( "" + decimalFormat.format(detalle.getCantidad()), de_x + 420, de_y);
                g2.drawString( "" + decimalFormat.format(detalle.getCosto()), de_x + 470, de_y);
                g2.drawString( "" + decimalFormat.format(detalle.getTotal()), de_x + 540, de_y);
                de_y += 15;
                
                
            }
            
            /**
             * CONDICIONES COMERNCIALES
             */
            
            g2.drawString( "Condiciones comerciales: " + this.txtCondiciones.getText() , 0, 660);
            //g2.draw
            
            //SUBTOTAL, IVA, TOTAL
            g2.drawString( "Subtotal:", 420, 700);
            g2.drawString( "I.V.A.:", 420, 715);
            g2.drawString( "Total", 420, 730);
            
            g2.drawString( "$" + decimalFormat.format(this.transaccion.getSubTotal()), 540, 700);
            g2.drawString( "$" + decimalFormat.format(this.transaccion.getIgv()), 540, 715);
            g2.drawString( "$" + decimalFormat.format(this.transaccion.getTotal()), 540, 730);
            
            g2.drawLine(420, 760, 570, 760);
            g2.drawString("Firma Responsable", 420, 775);
            
            
        } catch (Exception ex) {
            Logger.getLogger(FrmOrdenCompra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setClsEntidadCompraHib(ClsEntidadCompraHib compra) {
        this.compra = compra;
    }
    
    public void setIntEntidadTransaccionImprimible(IntEntidadTransaccionImprimible transaccion){
        this.transaccion = transaccion;
    }

    private Properties cargaPropertiesDatosEmpresa() {
        
        Properties properties = null;
        
        try{
            properties = new Properties();
            //properties.load(new FileInputStream("db.properties"));
            FileInputStream file;

            //the base folder is ./, the root of the main.properties file  
            String path = "./reporte.properties";

            //load the file handle for main.properties
            file = new FileInputStream(path);

            //load all the properties from this file
            properties.load(file);

            //we have loaded the properties, so close the file handle
            file.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmOrdenCompra.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmOrdenCompra.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return properties;
    }
    

    private class previewPanel extends JPanel{
        
        @Override
        public void paint(Graphics g) {
            super.paint(g); //To change body of generated methods, choose Tools | Templates.
            Graphics2D g2 = (Graphics2D)g;
            
            FrmOrdenCompra.this.paint(g2, 1.0, null);
        }
    }
    
    private class PrintManager implements Printable{

        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;
            }
            
            Graphics2D g2 = (Graphics2D)graphics;
            FrmOrdenCompra.this.paint(g2, 1.0, pageFormat);
            
            return PAGE_EXISTS;
        }
        
    }
    
}
